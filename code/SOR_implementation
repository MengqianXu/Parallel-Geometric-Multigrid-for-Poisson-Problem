function sor(A, b, x0, iterations, ω)
    n = length(b)
    x = copy(x0)
    for k in 1:iterations
        for i in 1:n
            sigma = 0.0
            for j = 1:i-1
                sigma += A[i,j] * x[j]
            end
            for j = i+1:n
                sigma += A[i,j] * x[j]
            end
            x[i] = (1 - ω) * x[i] + (ω / A[i,i]) * (b[i] - sigma)
        end
    end
    return x
end
using LinearAlgebra

function generate_spd_matrix(n)
    A = randn(n, n)
    A = 0.5 * (A + A')  # Make the matrix symmetric
    A += n * I  # Make the matrix diagonally dominant (and thus SPD)
    return A
end

function test_sor(n, ω, iterations)
    A = generate_spd_matrix(n)
    x_exact = randn(n)  # Random exact solution
    b = A * x_exact  # Generate b using the known solution
    
    x0 = zeros(n)  # Initial guess
    
    # Solve using SOR
    x_sor = sor(A, b, x0, iterations, ω)
    
    # Solve using direct method
    x_direct = A \ b
    
    # Calculate and print results
    println("Testing with matrix size: ", n)
    println("Difference (norm) between SOR and direct solver: ", norm(x_sor - x_direct))
end

# Parameters
ω = 1.25  # Relaxation parameter
iterations = 200  # Adjust based on the size and complexity of the problem

# Test with different sizes
for n in [10, 50, 100, 200]
    test_sor(n, ω, iterations)
    println()  # Print a newline for readability
end
